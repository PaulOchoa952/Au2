// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex


import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\4\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\6\20\3\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\30\1\36\1\30\1\37"+
    "\1\40\1\41\1\42\1\43\2\30\1\44\1\45\1\46"+
    "\1\30\1\47\4\30\1\50\1\0\1\51\1\0\1\52"+
    "\1\0\1\53\1\30\1\54\1\55\1\56\1\57\1\60"+
    "\1\30\1\61\1\62\1\30\1\63\1\64\1\65\1\66"+
    "\1\67\1\30\1\70\1\71\1\72\1\73\1\74\1\30"+
    "\1\75\2\30\1\76\1\77\1\100\7\0\1\3\113\0"+
    "\1\30\17\0\1\30\7\0\1\30\3\0\1\30\3\0"+
    "\1\30\1\0\1\30\6\0\1\30\u012d\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\1\1\20\12\21\1\22\1\23\7\21\1\24\1\3"+
    "\1\25\1\26\1\27\1\30\1\0\1\2\2\31\1\32"+
    "\1\33\1\34\7\21\2\35\11\21\1\36\2\0\2\21"+
    "\1\37\1\21\1\40\2\21\1\0\1\35\13\21\1\0"+
    "\1\2\16\21\1\36\1\21\1\41\5\21\1\42\1\21"+
    "\1\43\2\21\1\44\1\21\1\45\1\46\12\21\1\47"+
    "\4\21\1\50\2\21\1\51\5\21\1\52\11\21\1\53"+
    "\2\21\1\54\1\21\1\55\1\56\3\21\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\u0104\0\101\0\101"+
    "\0\101\0\101\0\101\0\u0145\0\101\0\u0186\0\u01c7\0\u0208"+
    "\0\101\0\101\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\101"+
    "\0\101\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\101\0\101\0\101\0\101\0\u075d\0\101\0\u079e\0\u07df"+
    "\0\101\0\u0820\0\101\0\101\0\101\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u030c\0\u0e38\0\u0965\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u0d34"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u030c\0\u15d6"+
    "\0\u030c\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u030c\0\u175c"+
    "\0\u030c\0\u179d\0\u17de\0\u030c\0\u181f\0\u030c\0\u030c\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u030c\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u030c\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u030c"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u030c\0\u203f\0\u2080\0\u030c\0\u20c1\0\u030c\0\u030c"+
    "\0\u2102\0\u2143\0\u2184\0\u030c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\26\1\27\1\30"+
    "\1\31\1\32\2\26\1\33\1\34\1\26\1\35\3\26"+
    "\1\36\1\37\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\2\26\1\46\3\26\1\47\1\50\4\26\1\51"+
    "\1\52\1\53\103\0\1\3\123\0\1\54\102\0\21\55"+
    "\2\0\24\55\20\0\1\56\74\0\1\57\4\0\1\60"+
    "\101\0\1\61\2\62\76\0\3\20\104\0\1\63\100\0"+
    "\1\64\100\0\1\65\72\0\3\26\5\0\21\26\2\0"+
    "\24\26\22\0\3\26\5\0\1\66\20\26\2\0\24\26"+
    "\22\0\3\26\5\0\4\26\1\67\14\26\2\0\24\26"+
    "\22\0\3\26\5\0\13\26\1\70\5\26\2\0\24\26"+
    "\22\0\3\26\5\0\1\71\20\26\2\0\24\26\22\0"+
    "\3\26\5\0\21\26\2\0\1\72\23\26\22\0\3\26"+
    "\5\0\14\26\1\73\4\26\2\0\24\26\22\0\3\26"+
    "\5\0\21\26\2\0\21\26\1\74\2\26\22\0\1\75"+
    "\2\76\5\0\21\26\2\0\24\26\22\0\3\26\5\0"+
    "\4\26\1\77\14\26\2\0\24\26\22\0\3\26\5\0"+
    "\21\26\2\0\22\26\1\100\1\101\22\0\3\26\5\0"+
    "\21\26\2\0\1\26\1\102\5\26\1\103\14\26\22\0"+
    "\3\26\5\0\21\26\2\0\4\26\1\104\17\26\22\0"+
    "\3\26\5\0\21\26\2\0\13\26\1\105\10\26\22\0"+
    "\3\26\5\0\21\26\2\0\21\26\1\106\2\26\22\0"+
    "\3\26\5\0\21\26\2\0\4\26\1\107\17\26\22\0"+
    "\3\26\5\0\21\26\2\0\7\26\1\110\14\26\22\0"+
    "\3\55\5\0\21\55\2\0\24\55\3\0\11\111\1\112"+
    "\67\111\2\60\1\3\1\60\1\4\74\60\17\0\3\62"+
    "\76\0\3\26\5\0\3\26\1\113\15\26\2\0\24\26"+
    "\22\0\3\26\5\0\2\26\1\114\16\26\2\0\24\26"+
    "\22\0\3\26\5\0\17\26\1\115\1\26\2\0\24\26"+
    "\22\0\3\26\5\0\11\26\1\116\7\26\2\0\24\26"+
    "\22\0\3\26\5\0\21\117\2\0\24\117\22\0\3\26"+
    "\5\0\6\26\1\120\12\26\2\0\24\26\22\0\3\26"+
    "\5\0\21\26\2\0\12\26\1\121\11\26\20\0\1\122"+
    "\1\0\3\26\5\0\21\26\2\0\24\26\20\0\1\123"+
    "\1\0\3\76\5\0\21\26\2\0\24\26\22\0\3\26"+
    "\5\0\15\26\1\124\3\26\2\0\24\26\22\0\3\26"+
    "\5\0\21\26\2\0\1\26\1\125\22\26\22\0\3\26"+
    "\5\0\21\26\2\0\15\26\1\126\6\26\22\0\3\26"+
    "\5\0\21\26\2\0\17\26\1\127\4\26\22\0\3\26"+
    "\5\0\21\26\2\0\10\26\1\130\2\26\1\131\10\26"+
    "\22\0\3\26\5\0\21\26\2\0\13\26\1\132\10\26"+
    "\22\0\3\26\5\0\21\26\2\0\20\26\1\133\3\26"+
    "\22\0\3\26\5\0\21\26\2\0\20\26\1\134\3\26"+
    "\22\0\3\26\5\0\21\26\2\0\15\26\1\135\6\26"+
    "\22\0\3\26\5\0\21\26\2\0\13\26\1\136\10\26"+
    "\3\0\11\111\1\137\100\111\1\137\4\111\1\140\62\111"+
    "\17\0\3\26\5\0\4\26\1\141\14\26\2\0\24\26"+
    "\22\0\3\26\5\0\7\26\1\115\11\26\2\0\24\26"+
    "\22\0\3\26\5\0\16\26\1\142\2\26\2\0\24\26"+
    "\22\0\3\26\5\0\7\26\1\143\11\26\2\0\24\26"+
    "\22\0\3\26\5\0\21\26\2\0\4\26\1\144\17\26"+
    "\22\0\3\123\76\0\3\26\5\0\3\26\1\145\15\26"+
    "\2\0\24\26\22\0\3\26\5\0\21\26\2\0\11\26"+
    "\1\146\12\26\22\0\3\26\5\0\21\26\2\0\1\26"+
    "\1\147\22\26\22\0\3\26\5\0\21\26\2\0\4\26"+
    "\1\150\17\26\22\0\3\26\5\0\21\26\2\0\1\26"+
    "\1\151\22\26\22\0\3\26\5\0\21\26\2\0\1\26"+
    "\1\152\22\26\22\0\3\26\5\0\21\26\2\0\4\26"+
    "\1\153\17\26\22\0\3\26\5\0\21\26\2\0\4\26"+
    "\1\154\17\26\22\0\3\26\5\0\21\26\2\0\1\26"+
    "\1\155\22\26\22\0\3\26\5\0\21\26\2\0\4\26"+
    "\1\156\17\26\22\0\3\26\5\0\21\26\2\0\14\26"+
    "\1\157\7\26\3\0\11\111\1\137\4\111\1\3\62\111"+
    "\17\0\3\26\5\0\13\26\1\160\5\26\2\0\24\26"+
    "\22\0\3\26\5\0\14\26\1\161\4\26\2\0\24\26"+
    "\22\0\3\26\5\0\2\26\1\162\16\26\2\0\24\26"+
    "\22\0\3\26\5\0\21\26\2\0\16\26\1\163\5\26"+
    "\22\0\3\26\5\0\1\164\20\26\2\0\24\26\22\0"+
    "\3\26\5\0\21\26\2\0\21\26\1\165\2\26\22\0"+
    "\3\26\5\0\21\26\2\0\13\26\1\166\10\26\22\0"+
    "\1\26\1\167\1\26\5\0\21\26\2\0\24\26\22\0"+
    "\3\26\5\0\21\26\2\0\16\26\1\170\5\26\22\0"+
    "\3\26\5\0\21\26\2\0\11\26\1\171\12\26\22\0"+
    "\3\26\5\0\21\26\2\0\16\26\1\172\5\26\22\0"+
    "\3\26\5\0\21\26\2\0\16\26\1\173\5\26\22\0"+
    "\3\26\5\0\21\26\2\0\16\26\1\174\5\26\22\0"+
    "\3\26\5\0\21\26\2\0\20\26\1\175\3\26\22\0"+
    "\3\26\5\0\1\176\20\26\2\0\24\26\22\0\3\26"+
    "\5\0\14\26\1\177\4\26\2\0\24\26\22\0\3\26"+
    "\5\0\21\26\2\0\14\26\1\200\7\26\22\0\3\26"+
    "\5\0\3\26\1\201\15\26\2\0\24\26\22\0\3\26"+
    "\5\0\21\26\2\0\1\26\1\202\22\26\22\0\3\26"+
    "\5\0\21\26\2\0\3\26\1\203\20\26\22\0\3\26"+
    "\5\0\21\26\2\0\1\204\23\26\22\0\3\26\5\0"+
    "\21\26\2\0\1\26\1\205\22\26\22\0\3\26\5\0"+
    "\21\26\2\0\16\26\1\206\5\26\22\0\3\26\5\0"+
    "\21\26\2\0\7\26\1\207\14\26\22\0\3\26\5\0"+
    "\21\26\2\0\1\210\23\26\22\0\3\26\5\0\4\26"+
    "\1\211\14\26\2\0\24\26\22\0\3\26\5\0\21\26"+
    "\2\0\16\26\1\212\5\26\22\0\3\26\5\0\21\26"+
    "\2\0\7\26\1\213\14\26\22\0\3\26\5\0\14\26"+
    "\1\214\4\26\2\0\24\26\22\0\3\26\5\0\21\26"+
    "\2\0\16\26\1\215\5\26\22\0\3\26\5\0\21\26"+
    "\2\0\21\26\1\216\2\26\22\0\3\26\5\0\21\26"+
    "\2\0\16\26\1\217\5\26\22\0\3\26\5\0\21\26"+
    "\2\0\3\26\1\220\20\26\22\0\3\26\5\0\15\26"+
    "\1\221\3\26\2\0\24\26\22\0\3\26\5\0\21\26"+
    "\2\0\16\26\1\222\5\26\22\0\3\26\5\0\21\26"+
    "\2\0\16\26\1\223\5\26\22\0\3\26\5\0\21\26"+
    "\2\0\1\224\23\26\22\0\3\26\5\0\21\26\2\0"+
    "\12\26\1\225\11\26\22\0\3\26\5\0\12\26\1\226"+
    "\6\26\2\0\24\26\22\0\3\26\5\0\21\26\2\0"+
    "\4\26\1\227\17\26\22\0\3\26\5\0\14\26\1\230"+
    "\4\26\2\0\24\26\22\0\3\26\5\0\21\26\2\0"+
    "\7\26\1\231\14\26\22\0\3\26\5\0\21\26\2\0"+
    "\6\26\1\232\15\26\22\0\3\26\5\0\21\26\2\0"+
    "\15\26\1\233\6\26\22\0\3\26\5\0\21\26\2\0"+
    "\7\26\1\234\14\26\22\0\3\26\5\0\21\26\2\0"+
    "\2\26\1\235\21\26\22\0\3\26\5\0\21\26\2\0"+
    "\6\26\1\236\15\26\22\0\3\26\5\0\21\26\2\0"+
    "\16\26\1\237\5\26\22\0\3\26\5\0\21\26\2\0"+
    "\7\26\1\240\14\26\22\0\3\26\5\0\21\26\2\0"+
    "\4\26\1\241\17\26\22\0\3\26\5\0\21\26\2\0"+
    "\7\26\1\242\14\26\22\0\3\26\5\0\21\26\2\0"+
    "\4\26\1\243\17\26\22\0\3\26\5\0\21\26\2\0"+
    "\1\26\1\244\22\26\22\0\3\26\5\0\21\26\2\0"+
    "\16\26\1\245\5\26\22\0\3\26\5\0\21\26\2\0"+
    "\13\26\1\246\10\26\22\0\3\26\5\0\21\26\2\0"+
    "\13\26\1\247\10\26\22\0\3\26\5\0\21\26\2\0"+
    "\5\26\1\250\16\26\22\0\3\26\5\0\21\26\2\0"+
    "\20\26\1\251\3\26\22\0\3\26\5\0\21\26\2\0"+
    "\16\26\1\252\5\26\22\0\3\26\5\0\21\26\2\0"+
    "\1\26\1\253\22\26\22\0\3\26\5\0\21\26\2\0"+
    "\17\26\1\254\4\26\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\5\11\1\1\1\11\3\1\2\11"+
    "\15\1\2\11\7\1\4\11\1\1\1\11\1\0\1\1"+
    "\1\11\1\1\3\11\23\1\2\0\7\1\1\0\14\1"+
    "\1\0\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 48: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 4:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 5:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 6:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 7:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 8:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 9:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 10:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 11:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 12:
            { return token(yytext(), "N_ENTERO", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 13:
            { return token(yytext(), "DOBLE_PUNTO", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 14:
            { return token(yytext(), "PUNTOyCOMA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 15:
            { return token(yytext(), "MENOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 16:
            { return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 17:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 18:
            { return token(yytext(), "CORCHETE_A", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 19:
            { return token(yytext(), "CORCHETE_C", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 20:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 21:
            { return token(yytext(), "LLAVE_C", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 22:
            { return token(yytext(), "DIFERENTE_DE", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 23:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 24:
            { return token(yytext(), "Op_Asig", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 25:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 26:
            { return token(yytext(), "MENOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 27:
            { return token(yytext(), "IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 28:
            { return token(yytext(), "MAYOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 29:
            { return token(yytext(), "TEMPERATURA", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 30:
            { return token(yytext(), "ESTRUCTURA_SI", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 31:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 32:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 33:
            { return token(yytext(), "LOGICO_F", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 34:
            { return token(yytext(), "FASES", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 35:
            { return token(yytext(), "FINAL_W", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 36:
            { return token(yytext(), "FUNCION_MUTAR", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 37:
            { return token(yytext(), "TIPO_CADENA", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 38:
            { return token(yytext(), "TIPO_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 39:
            { return token(yytext(), "EVALUAR", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 40:
            { return token(yytext(), "REPETIR", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 41:
            { return token(yytext(), "EXPANDIR", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 42:
            { return token(yytext(), "LOGICO_V", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 43:
            { return token(yytext(), "N_DECIMAL", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 44:
            { return token(yytext(), "DETENER_REPETIR", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 45:
            { return token(yytext(), "FIJAR_ORIGEN", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 46:
            { return token(yytext(), "GENERAR_GRAF", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
